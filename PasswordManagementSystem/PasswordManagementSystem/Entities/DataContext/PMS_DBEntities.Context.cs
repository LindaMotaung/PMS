//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PasswordManagementSystem.Entities.DataContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PMS_DBEntities : DbContext
    {
        public PMS_DBEntities()
            : base("name=PMS_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Exception> Exceptions { get; set; }
        public virtual DbSet<UserData> UserDatas { get; set; }
        public virtual DbSet<ConfirmationCode> ConfirmationCodes { get; set; }
        public virtual DbSet<AccountsVault> AccountsVaults { get; set; }
        public virtual DbSet<Key> Keys { get; set; }
    
        public virtual int spAddException(string actionPerformed, string exceptionCaught, string exceptionMessage, Nullable<System.DateTime> dateRecorded)
        {
            var actionPerformedParameter = actionPerformed != null ?
                new ObjectParameter("actionPerformed", actionPerformed) :
                new ObjectParameter("actionPerformed", typeof(string));
    
            var exceptionCaughtParameter = exceptionCaught != null ?
                new ObjectParameter("exceptionCaught", exceptionCaught) :
                new ObjectParameter("exceptionCaught", typeof(string));
    
            var exceptionMessageParameter = exceptionMessage != null ?
                new ObjectParameter("exceptionMessage", exceptionMessage) :
                new ObjectParameter("exceptionMessage", typeof(string));
    
            var dateRecordedParameter = dateRecorded.HasValue ?
                new ObjectParameter("dateRecorded", dateRecorded) :
                new ObjectParameter("dateRecorded", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddException", actionPerformedParameter, exceptionCaughtParameter, exceptionMessageParameter, dateRecordedParameter);
        }
    
        public virtual int spAddApplicationAccount(byte[] application)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddApplicationAccount", applicationParameter);
        }
    
        public virtual int spAddConfirmationCode(byte[] confirmationCode)
        {
            var confirmationCodeParameter = confirmationCode != null ?
                new ObjectParameter("confirmationCode", confirmationCode) :
                new ObjectParameter("confirmationCode", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddConfirmationCode", confirmationCodeParameter);
        }
    
        public virtual int spAddUserData(byte[] userRSAEncryptedData)
        {
            var userRSAEncryptedDataParameter = userRSAEncryptedData != null ?
                new ObjectParameter("UserRSAEncryptedData", userRSAEncryptedData) :
                new ObjectParameter("UserRSAEncryptedData", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUserData", userRSAEncryptedDataParameter);
        }
    
        public virtual int spAddKey(byte[] publicKey)
        {
            var publicKeyParameter = publicKey != null ?
                new ObjectParameter("publicKey", publicKey) :
                new ObjectParameter("publicKey", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddKey", publicKeyParameter);
        }
    
        public virtual int spUpdateApplicationAccount(Nullable<int> id, byte[] application)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateApplicationAccount", idParameter, applicationParameter);
        }
    
        public virtual int spUpdateUserData(Nullable<int> id, byte[] userRSAEncryptedData)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userRSAEncryptedDataParameter = userRSAEncryptedData != null ?
                new ObjectParameter("UserRSAEncryptedData", userRSAEncryptedData) :
                new ObjectParameter("UserRSAEncryptedData", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateUserData", idParameter, userRSAEncryptedDataParameter);
        }
    
        public virtual int spDeleteAccountsVaultEntry(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAccountsVaultEntry", idParameter);
        }
    
        public virtual int spTruncateAccountVault()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTruncateAccountVault");
        }
    
        public virtual int spUpdateAppVault(Nullable<int> id, byte[] application)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAppVault", idParameter, applicationParameter);
        }
    }
}
